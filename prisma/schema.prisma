generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  userautor     String?      @unique
  name          String?
  avatar        String?
  Post          Post[]
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  password      String?
  comentario    Comentario[]
  accounts      Account[]
  sessions      Session[]
}

model Post {
  id           Int          @id @default(autoincrement())
  slug         String       @unique
  titulo       String
  titulo2      String
  titulo3      String
  titulo4      String
  titulo5      String
  titulo6      String
  texto        String
  texto2       String
  texto3       String
  texto4       String
  texto5       String
  texto6       String
  video        String
  tempoLeitura String
  data         DateTime     @default(now())
  atualizacao  DateTime     @updatedAt
  imagem       String
  imagem2      String
  imagem3      String
  imagem4      String
  imagem5      String
  imagem6      String
  authorId     Int
  author       User         @relation(fields: [authorId], references: [id])
  comentarios  Comentario[]
  likes        Int          @default(0)
}

model Comentario {
  id         Int          @id @default(autoincrement())
  Texto      String
  criado     DateTime     @default(now())
  atualizado DateTime     @updatedAt
  authorId   Int
  author     User         @relation(fields: [authorId], references: [id])
  postId     Int
  post       Post         @relation(fields: [postId], references: [id])
  paiId      Int?
  pai        Comentario?  @relation("ComentariosFilhos", fields: [paiId], references: [id])
  filhos     Comentario[] @relation("ComentariosFilhos")
}

// Configuração do schema do auth.js

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
